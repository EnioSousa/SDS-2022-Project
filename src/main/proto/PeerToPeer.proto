syntax = "proto3";

option java_package = "grpcCode";

service PeerToPeer {
  rpc Ping(NodeInfoMSG) returns (SuccessMSG) {}

  rpc FindNode(FindNodeMSG) returns (stream NodeInfoMSG) {}

  rpc Store(SaveMSG) returns (SuccessMSG) {}

  rpc Find(FindMSG) returns (stream FindResponseMSG) {}

  rpc FirstConn(InitMSG) returns (InitResponse) {}

  rpc GetID(GetIdMSG) returns (GetIdResponse) {}

  rpc SendTransaction(TransactionMSG) returns (SuccessMSG) {}

  rpc SendBlock(BlockMSG) returns (SuccessMSG) {}

  rpc SendBlockChainSize(NodeInfoMSG) returns (BlockChainSizeMSG) {}

  rpc SendFullBlockChain(NodeInfoMSG) returns (stream BlockContentMSG) {}
}

message InitMSG{
  string ip = 1;
}

message InitResponse{
  int64 timeStamp = 1;
}

message GetIdMSG{
  string ip = 1;
  bytes challenge = 2;
  int64 timeStamp = 3;
  int32 nonce = 4;
}

message GetIdResponse{
  bytes id = 1;
}


/**
  Empty message
 */
message EmptyMSG {

}

/**
  Message format for a basic info of a node
 */
message NodeInfoMSG {
  // Node identification
  bytes nodeId = 1;
  // IP of node
  string nodeIp = 2;
  // Port of the node
  int32 nodePort = 3;
}

message FindNodeMSG {
  NodeInfoMSG requester = 1;

  bytes wantedId = 2;
}

/**
  Message format for a save request
 */
message SaveMSG {
  NodeInfoMSG requester = 1;

  bytes key = 2;

  bytes value = 3;
}

/**
  Message format for a find request
 */
message FindMSG {
  NodeInfoMSG requester = 1;

  bytes key = 2;
}

message FindResponseMSG {
  NodeInfoMSG responder = 1;

  bytes value = 2;
}

message SuccessMSG {
  bool success = 1;
}
message TransactionMSG {
  NodeInfoMSG nodeInfo = 1;
  bytes sourceEntity = 2;
  bytes destEntity = 3;
  bytes productId = 4;
  int32 bidTrans = 5;
}

message TransactionContentMSG {
  bytes sourceEntity = 1;
  bytes destEntity = 2;
  bytes productId = 3;
  int32 bidTrans = 4;
}

message BlockMSG {
  NodeInfoMSG nodeInfo = 1;
  BlockHeaderMSG blockHeader = 2;
  repeated TransactionContentMSG transaction = 3;
}

message BlockContentMSG {
  BlockHeaderMSG blockHeader = 1;
  repeated TransactionContentMSG transaction = 2;
}

message BlockHeaderMSG {
  int32 version = 1;
  int64 time = 2;
  int32 difficulty = 3;
  bytes prevHash = 4;
  bytes merkleRoot = 5;
  int32 nonce = 6;
}

message BlockChainSizeMSG {
  int32 size = 1;
}